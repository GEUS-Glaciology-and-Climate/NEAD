#+TITLE: NEAD format specification


* Table of contents                               :toc_3:noexport:
- [[#introduction][Introduction]]
- [[#file-format-ebnf-syntax][File format: EBNF syntax]]

* Introduction

This document describes the NEAD (New Environmental Archive Data) file format. For more information, see https://github.com/GEUS-PROMICE/NEAD.

The NEAD format is a delimiter separated value (DSV) format similar to CSV, but with a header section, followed by the data section. The following [[https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form][Extended Bakus-Naur form (EBNF)]] syntax describes the file format.

Note - I am using the EBNF notation from the [[https://www.w3.org/TR/2010/REC-xquery-20101214/#EBNFNotation][W3C Extensible Markup Language (XML)]], not the [[https://www.iso.org/standard/26153.html][ISO/IEC 14977:1996]] EBNF standard. The W3C XML standard is implemented and parsed by the Railroad Diagram Generator (https://github.com/GuntherRademacher/rr) that is used to make the graphics shown in this document.

#+BEGIN_SRC bash :exports none
# java -jar ~/local/rr/rr.war -png ./NEAD.ebnf > NEAD.zip
# unzip NEAD.zip
# java -jar ~/local/rr/rr.war -png ./NEAD.ebnf > NEAD.zip; unzip -o NEAD.zip
java -jar ~/local/rr/rr.war -suppressebnf ./NEAD.ebnf > NEAD.svg
# firefox index.html
#+END_SRC

* File format: EBNF syntax

Click on the example graphic below to see the full graphical representation of the EBNF.

[[https://raw.githubusercontent.com/GEUS-PROMICE/NEAD/main/NEAD.svg][file:./fig/example.png]]

The [[https://raw.githubusercontent.com/GEUS-PROMICE/NEAD/main/NEAD.svg][graphical EBNF form]] is generated from the following EBNF syntax:

#+BEGIN_SRC ebnf :tangle NEAD.ebnf :exports code
NEAD             ::= firstline headerstart headerlines datastart datalines
firstline        ::= '#' ' ' 'NEAD' ' ' version_number ' ' file_format newline
headerstart      ::= '#' ' ' '[HEADER]' newline

headerlines      ::= ( ( linestart ( comment | required_header | recommended_header | other_header )? )? newline )+
linestart        ::= '#' whitespace
required_header  ::= ('column_delimiter' whitespace '=' whitespace column_delimiter) | ('fields' whitespace '=' whitespace values)
/* column_delimiter ::= (char|symbol) */
column_delimiter ::= [,|\/:;]


recommended_header ::= (( 'station_id' | 'nodata_value' | 'srid' | 'geometry' | 'tz') whitespace '=' whitespace value) | ( 'units_offset' | 'units_multiplier' | 'display_units' ) whitespace '=' whitespace values

other_header    ::= key whitespace '=' whitespace values
key             ::= char (alphanumeric*)?
value           ::= unicode-char*
values          ::= value ( column_delimiter value )*

datastart       ::= '#' ' ' '[DATA]' newline
datalines       ::= value ( column_delimiter value )*

whitespace      ::= (tab | space)+  /* tab or space only */
comment         ::= '#' whitespace? (characters)?
newline         ::= #x0A

tab             ::= #x9
space           ::= #x20
char            ::= [A-Za-z]
digit           ::= [0-9]
integer         ::= [+-]? digit+
alphanumeric    ::= (digit | char)+
hex             ::= (digit | [abcdef])+
float           ::= integer '.' ((digit)+)?

/* https://www.w3.org/TR/xml/#NT-Char */
/* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */
unicode-char    ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]


version_number  ::= digit* ('.' (alphanumeric)+)? ('.' (alphanumeric)+)?
file_format     ::= 'UTF-8' | 'ASCII'

/*
INTEGER  ::= [+#x2D]? [0-9]+
HEX      ::= [0-9A-Fa-f]
DECIMAL  ::= [+#x2D]? [0-9]* '.' [0-9]+
objectList  ::= object ( ',' object )*
*/

#+END_SRC


